basePath: /api/v1
definitions:
  ent.Role:
    properties:
      description:
        description: Description holds the value of the "description" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.RoleEdges:
    properties:
      users:
        description: Users holds the value of the users edge.
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  ent.User:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      edges:
        allOf:
        - $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      role_id:
        description: RoleID holds the value of the "role_id" field.
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/user.Status'
        description: Status holds the value of the "status" field.
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      role:
        allOf:
        - $ref: '#/definitions/ent.Role'
        description: Role holds the value of the role edge.
    type: object
  handler.LoginInput:
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handler.LoginResponse:
    properties:
      expires_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/handler.UserInfo'
    type: object
  handler.RefreshInput:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  handler.RegisterInput:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handler.RoleCreateInput:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  handler.RoleUpdateInput:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  handler.UserCreateInput:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: secret123
        minLength: 6
        type: string
      role_id:
        example: 1
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/user.Status'
        example: active
    required:
    - email
    - name
    - password
    - role_id
    type: object
  handler.UserInfo:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  handler.UserUpdateInput:
    properties:
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: newsecret123
        type: string
      role_id:
        example: 2
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/user.Status'
        example: active
    type: object
  response.Response:
    properties:
      code:
        description: code identifier
        type: string
      data:
        description: Response data
      message:
        description: code message
        type: string
      request_id:
        description: Unique request identifier
        type: string
      timestamp:
        description: Unix timestamp in milliseconds
        type: integer
    type: object
  user.Status:
    enum:
    - active
    - active
    - disabled
    type: string
    x-enum-varnames:
    - DefaultStatus
    - StatusActive
    - StatusDisabled
info:
  contact: {}
  description: A RESTful API for Go Template
  title: Go Template API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/handler.LoginResponse'
              type: object
        "500":
          description: server.error ｜ invalid.params ｜ user.login.error ｜ user.disabled
          schema:
            $ref: '#/definitions/response.Response'
      summary: User login
      tags:
      - auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Returns information about the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/handler.UserInfo'
              type: object
        "500":
          description: server.error ｜ invalid.params ｜ user.unauthorized | user.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT token using a refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/handler.LoginResponse'
              type: object
        "500":
          description: server.error ｜ invalid.params ｜ auth.token.expired | auth.token.invalid
            | user.not_found | user.disabled
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/handler.UserInfo'
              type: object
        "500":
          description: server.error ｜ invalid.params ｜ user.register.error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register new user
      tags:
      - auth
  /roles:
    get:
      consumes:
      - application/json
      description: Get a list of roles
      parameters:
      - description: Include users information
        in: query
        name: with_users
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.Role'
                  type: array
              type: object
        "500":
          description: server.error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: List Roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: create a new role
      parameters:
      - description: Role Info
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handler.RoleCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/ent.Role'
              type: object
        "500":
          description: server.error ｜ invalid.params
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a role
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: delete a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: server.error ｜ invalid.params | role.not_found | role.in_use
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Include users information
        in: query
        name: with_users
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/ent.Role'
              type: object
        "500":
          description: server.error | invalid.params | role.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get a role
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: update an existing role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role Info
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handler.RoleUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/ent.Role'
              type: object
        "500":
          description: server.error ｜ invalid.params | role.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - roles
  /roles/{id}/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with a specific role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.User'
                  type: array
              type: object
        "500":
          description: server.error ｜ invalid.params | role.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get Users with a specific role
      tags:
      - roles
  /users:
    get:
      consumes:
      - application/json
      description: get user list
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.User'
                  type: array
              type: object
        "500":
          description: server.error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create a new user
      parameters:
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.UserCreateInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/ent.User'
              type: object
        "500":
          description: server.error ｜ invalid.params
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Create a user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: server.error ｜ invalid.params | user.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/ent.User'
              type: object
        "500":
          description: server.error ｜ invalid.params ｜ user.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.UserUpdateInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/ent.User'
              type: object
        "500":
          description: server.error ｜ invalid.params | user.not_found | role.not_found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
